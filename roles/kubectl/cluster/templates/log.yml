---

apiVersion: v1
kind: Secret
metadata:
  name: cluster-log-destination
  namespace: cluster-service

type: Opaque
data:
  papertrail-destination: {{secrets.papertrail.destination | b64encode}}

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: cluster-log
  namespace: cluster-service

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-log
  namespace: cluster-service
  labels:
    k8s-app: cluster-log
    k8s-role: cluster-service

roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin

subjects:
  - kind: ServiceAccount
    name: cluster-log
    namespace: cluster-service

---

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cluster-log
  namespace: cluster-service
  labels:
    k8s-app: cluster-log
    k8s-role: cluster-service

spec:
  selector:
    matchLabels:
      k8s-app: cluster-log

  template:
    metadata:
      labels:
        k8s-app: cluster-log

    spec:
      hostPID: true
      hostIPC: true
      hostNetwork: true
      containers:
        - resources:
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 100m
              memory: 100Mi
          env:
{% raw %}
            - name: SYSLOG_TAG
              value: '{{ index .Container.Config.Labels "io.kubernetes.pod.namespace" }}[{{ index .Container.Config.Labels "io.kubernetes.pod.name" }}]'
            - name: SYSLOG_HOSTNAME
              value: '{{ index .Container.Config.Labels "io.kubernetes.container.name" }}'
{% endraw %}
            - name: ROUTE_URIS
              valueFrom:
                secretKeyRef:
                  name: cluster-log-destination
                  key: papertrail-destination
          image: "gliderlabs/logspout:master"
          name: cluster-log
          volumeMounts:
            - name: log
              mountPath: /var/run/docker.sock
      serviceAccountName: cluster-log
      volumes:
        - name: log
          hostPath:
              path: /var/run/docker.sock