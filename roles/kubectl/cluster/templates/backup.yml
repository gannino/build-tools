---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: backup-job

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: backup-job-exec
  namespace: default
  labels:
    rbac.{{ build_tools_cluster.name }}/backup-job-role: "true"
rules:
  - apiGroups: [""]
    resources: ["pods", "pods/exec"]
    verbs: ["get", "list", "create"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: backup-job
aggregationRule:
  clusterRoleSelectors:
    - matchLabels:
        rbac.{{ build_tools_cluster.name }}/backup-job-role: "true"
rules: []

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: backup-job
subjects:
  - kind: ServiceAccount
    name: backup-job
    namespace: default
roleRef:
  kind: ClusterRole
  name: backup-job
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: gitlab-backup
  labels:
    app: gitlab
spec:
  concurrencyPolicy: Forbid
  schedule: "0 0 * * *"
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: gitlab
        spec:
          containers:
            - name: gitlab-backup
              image: apextoaster/kube
              args:
                - /bin/bash
                - -c
                - |
                  set -euxo pipefail;
                  echo "Starting backup: $(date)";
                  kubectl get pods -o wide;
                  kubectl exec gitlab-0 -- gitlab-rake gitlab:backup:create SKIP=artifacts,builds,registry
                  echo "Finished backup: $(date)";
          nodeSelector:
            cluster: server
          restartPolicy: OnFailure
          serviceAccountName: backup-job
