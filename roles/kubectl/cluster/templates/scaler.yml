---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: cluster-scaler
  namespace: cluster-service

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: cluster-scaler
  namespace: cluster-service
  labels:
    k8s-app: cluster-scaler
    k8s-role: cluster-service
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: cluster-scaler
  namespace: cluster-service

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: cluster-scaler
  namespace: cluster-service
  labels:
    k8s-app: cluster-scaler
    k8s-role: cluster-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cluster-scaler
  template:
    metadata:
      labels:
        app: cluster-scaler
    spec:
      containers:
        - image: gcr.io/google_containers/cluster-autoscaler:v1.0.3
          name: cluster-scaler
          resources:
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 100m
              memory: 300Mi
          command:
            - ./cluster-autoscaler
            - --v=4
            - --scale-down-unneeded-time=5m
            - --stderrthreshold=info
            - --cloud-provider=aws
            - --skip-nodes-with-local-storage=false
{% for ig in build_tools_cluster.nodes %}
{% if 'auto' in ig %}
            - --nodes={{ ig.size.min }}:{{ ig.size.max }}:{{ ig.name }}-nodes.{{ secrets.tags.project }}.{{ secrets.dns.base }}
{% endif %}
{% endfor %}
          env:
            - name: AWS_REGION
              value: {{ secrets.region.primary }}
          volumeMounts:
            - name: ssl-certs
              mountPath: /etc/ssl/certs/ca-certificates.crt
              readOnly: true
          imagePullPolicy: "Always"
      nodeSelector:
        cluster: server
      serviceAccountName: cluster-scaler
      volumes:
        - name: ssl-certs
          hostPath:
            path: "/etc/ssl/certs/ca-certificates.crt"